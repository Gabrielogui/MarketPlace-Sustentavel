spring.application.name=omarket

# |=======| PostgreSQL |=======| 
spring.datasource.url=jdbc:postgresql://localhost:5432/omarket
spring.datasource.username=postgres
spring.datasource.password=1234

# |=======| JPA/HIBERNATE - BANCO DE DADOS |=======| 
# Cria/altera tabelas automaticamente (em dev)
spring.jpa.hibernate.ddl-auto=update
# Mostra SQL no console (útil para debug)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

api.security.token.secret=${JWT_SECRET:my-insecure-secret-key}

# Mostra os valores dos parâmetros que estão sendo enviados com o SQL
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Configurações para a API de Frete (Melhor Envio)
melhorenvio.api.url=https://www.melhorenvio.com.br/api/v2/me/shipment/calculate
melhorenvio.api.token=${MELHORENVIO_API_TOKEN:DEFAULT_VALUE_IF_NEEDED}

# Para produção, o token será lido da variável de ambiente MERCADOPAGO_ACCESS_TOKEN
mercadopago.access.token=${MERCADOPAGO_ACCESS_TOKEN:DEFAULT_VALUE_IF_NEEDED}

# URL da API (não é um segredo, pode ficar aqui)
mercadopago.api.url=https://api.mercadopago.com/v1/payments


# ================================================================
# PERFIL PADRÃO
# ================================================================
# Ativa o perfil 'dev' por padrão. Quando rodar localmente, o Spring
# vai automaticamente carregar as propriedades do application-dev.properties.
spring.profiles.active=dev
